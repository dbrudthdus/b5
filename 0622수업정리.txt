# 0622 Security

- session을 써도 되는데 security 쓰는 이유
- Stateless(무상태). Connectionless
- 세션 쿠키
- 빵집 스탬프 카드
    
    정보 자체가 카드에 남아있음
    
- 코스트코 카드
    
    사용자에 대한 정보가 서버에 있고 카드에는 정보 식별을 위한 키가 있음
    
    → 덜 위험하지만 공격할 수 있는 방법이 많음
    
    세션 폭탄: 고의로 카드를 안 가져가서 서버에 계속 신규로 회원 정보를 넣음
    
    사용자의 로그인 유지에 대한 문제
    
- 시큐리티는 보안 프로그램인데 스프링으로 흡수됨
    
    → 형태가 스프링과 많이 다른 편
    
    세션을 기본으로 함 → 서버 사이드 랜더링
    
- 장점
    1. 간단하게 remember me(자동 로그인) 기능 구현 가능
    2. 어떤 페이지를 보려다 로그인을 하게 되면 자동으로 해당 페이지를 호출
    3. 인증, 인가라는 개념이 존재
    
    → 일반 사용자, 어드민 등 등급을 체크해줌
    
- 단점
    1. Web Security: 세션 베이스
        
        → 세션을 사용하지 않는 어플에선 무용지물
        
    2. 스프링과 버전이 맞지 않음
        
        → 호환성 문제, 설정이 복잡하고 까다로움 → 부트로 해결
        

- 설치

https://drive.google.com/drive/folders/1vWDuhj6sHIYn-K0Qyj-CjFC9VcGf0HOX

C:\Users\hi\Downloads\PART9_v3_10-master\src\main\java\org\zerock\api01\config

**[CustomSecurityConfig.java](http://CustomSecurityConfig.java)**

- 설정
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a2752d80-825c-4217-b05a-31b81a13ef94/Untitled.png)
    
    1. build.gradle
    
    **implementation** 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    
    → 타임리프와 시큐리티 버전 맞추는 라이브러리
    
    1. [application.properties](http://application.properties)
    
    logging.level.org.springframework=info
    logging.level.org.zerock=debug
    
    1. 서버 실행하고 8080 접속하면 로그인 화면이 자동으로 뜸
    
    → 어느 url로 접속해도 로그인 화면
    
    1. configuration 잡기
        
        로그 레벨: trace, debug, info, warning, error, fatal
        
        logging.level.org.springframework.security=trace ([application.properties](http://application.properties) 추가)
        
    2. 클래스 생성, 어노테이션 import
        
        @**Configuration**
        
        @Bean
        
- 인증(Authentication) / 인가(**[Authorization](https://gintrie.tistory.com/36))**
    
    인증: 사용자가 스스로 상대방에게 인증      ex) 주민등록증
    
    Bad Credential: 인증이 잘못 됐을 때
    
    인가: 외부(서버)에서 허가, 권한을 줌
    
    대부분의 권한은 ‘ROLE_’ 로 시작     ex)ROLE_user
    
    → 사용자가 인증, 인가의 로직을 개발해서 스프링 시큐리티의 설정으로 잡아주면 스프링 시큐리티가 그대로 인증, 인가 작업 진행
    
    UserDetailsService: 스프링 시큐리티에서 가장 중요한 객체, 인증을 처리하는 인터페이스
    
    이 인터페이스를 내가 원하는 로직으로 구현
    
    모든 흐름은 완성되어 있고 인터페이스에 로직을 끼워 넣어서 사용
    
    var args(가변인자): doA(String… arr) → 매개변수로 String 여러 개 받을 때
    
    PasswordEncoder
    
    **[BCryptPasswordEncoder](https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.html#%3Cinit%3E())**(): 암호 복호화
    
- *뷰를 볼 수 있는 권한 차등*
    
    https://docs.spring.io/spring-security/site/docs/3.0.x/reference/el-access.html
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5bd03841-ed26-4586-a9f1-061fedf32f60/Untitled.png)
    
    @**EnableMethodSecurity: 어노테이션으로 시큐리티(권한)에 대한 설정 가능하게 함** 
    
    @**PreAuthorize**
    
- 대칭키 / 비대칭키
    
    대칭키: 키의 안정성에 대한 문제 → 비대칭키로 해결
    
    비대칭키: 이미 키가 걸려 있는 상태에서 키를 하나 더 설정
    
    패스워드를 인코딩하지 않으면 실행이 아예 안 됨
    

### 정리

프로젝트 생성: url을 치면 login 페이지로

→ CustomSecurityConfig 생성: 로그인 없이 접근 가능해짐

→ **CustomUserDetailsService: UserDetailsService 구현**

패스워드 인코더 설정 → 로그인 안 해도 접속 가능한 문제

anyRequest: 모든 요청에 로그인이 필요해짐

→ **SampleController 생성: 권한 차등 부여**